/**
 * ESP-NOW
 * 
 * Sender
*/
#include <Arduino.h>
#include <ESP8266WiFi.h>
#include <espnow.h>
#include <Ultrasonic.h>

Ultrasonic ultrasonic(D5,D6); // Trig , Echoe for Wemos mini
int distance;
// Mac address of the slave
uint8_t peer1[] = {0x3C, 0x61,0x05,0x10,0x96,0x1C};
typedef struct message {
   int id;
   int distance;
   
};
struct message myMessage;
void onSent(uint8_t *mac_addr, uint8_t sendStatus) {
  Serial.println("Status:");
  Serial.println(sendStatus);
}
void setup() {
  Serial.begin(115200);
  WiFi.mode(WIFI_STA);
  // Get Mac Add
  Serial.print("Mac Address: ");
  Serial.print(WiFi.macAddress());
  Serial.println("ESP-Now Sender");
  // Initializing the ESP-NOW
  if (esp_now_init() != 0) {
    Serial.println("Problem during ESP-NOW init");
    return;
  }
  esp_now_set_self_role(ESP_NOW_ROLE_CONTROLLER);
  // Register the peer
  Serial.println("Registering a peer");
  esp_now_add_peer(peer1, ESP_NOW_ROLE_SLAVE, 1, NULL, 0);
  Serial.println("Registering send callback function");
  esp_now_register_send_cb(onSent);
}
void loop() {
    // Set values to send
  distance = ultrasonic.read();
  int distance2 = constrain(distance, 30,288);
  //Serial.println(distance2);
  int distance_tx = map(distance2, 30, 288, 0, 255);
  //Serial.println(distance_tx);
  myMessage.id = 3;  //Change the number for each device
  myMessage.distance = distance_tx;
  Serial.println(distance_tx);
  Serial.println("Send a new message");
  esp_now_send(NULL, (uint8_t *) &myMessage, sizeof(myMessage));
  delay(250);
}
